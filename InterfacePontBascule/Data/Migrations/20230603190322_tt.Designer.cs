// <auto-generated />
using System;
using InterfacePontBascule.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterfacePontBascule.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230603190322_tt")]
    partial class tt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InterfacePontBascule.Models.Achat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOP")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBonA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTicket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PB")
                        .HasColumnType("int");

                    b.Property<int>("PCC")
                        .HasColumnType("int");

                    b.Property<int>("PCV")
                        .HasColumnType("int");

                    b.Property<int>("PQRa")
                        .HasColumnType("int");

                    b.Property<int>("PQS")
                        .HasColumnType("int");

                    b.Property<int>("ParcId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Termine")
                        .HasColumnType("bit");

                    b.Property<string>("Transporteur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDeCamionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeDechetId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcId");

                    b.HasIndex("TypeDeCamionId");

                    b.HasIndex("TypeDeDechetId");

                    b.HasIndex("TypeDeTransportId");

                    b.ToTable("Achats");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.ComPort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaudeRate")
                        .HasColumnType("int");

                    b.Property<int>("DataBits")
                        .HasColumnType("int");

                    b.Property<bool>("DtrEnable")
                        .HasColumnType("bit");

                    b.Property<string>("PortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceivedBytesThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("RtsEnable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ComPorts");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.Parc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("actuel")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Parcs");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.Pesage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOP")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBonA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTicket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCC")
                        .HasColumnType("int");

                    b.Property<int>("PCV")
                        .HasColumnType("int");

                    b.Property<int>("ParcId")
                        .HasColumnType("int");

                    b.Property<int>("QP")
                        .HasColumnType("int");

                    b.Property<bool>("Termine")
                        .HasColumnType("bit");

                    b.Property<string>("Transporteur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDeCamionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcId");

                    b.HasIndex("TypeDeCamionId");

                    b.HasIndex("TypeDeTransportId");

                    b.ToTable("Pesages");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.ReceptionRondBeton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Diametre")
                        .HasColumnType("int");

                    b.Property<string>("Mat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBonA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTicket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PB")
                        .HasColumnType("int");

                    b.Property<int>("PCC")
                        .HasColumnType("int");

                    b.Property<int>("PCV")
                        .HasColumnType("int");

                    b.Property<int>("PQRa")
                        .HasColumnType("int");

                    b.Property<int>("PQS")
                        .HasColumnType("int");

                    b.Property<int>("ParcId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Termine")
                        .HasColumnType("bit");

                    b.Property<string>("Transporteur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDeCamionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcId");

                    b.HasIndex("TypeDeCamionId");

                    b.HasIndex("TypeDeTransportId");

                    b.ToTable("ReceptionRondBetons");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.ReceptionTransfertDechet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCC")
                        .HasColumnType("int");

                    b.Property<int>("PCV")
                        .HasColumnType("int");

                    b.Property<int>("PQS")
                        .HasColumnType("int");

                    b.Property<int>("ParcId")
                        .HasColumnType("int");

                    b.Property<string>("Provenance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Termine")
                        .HasColumnType("bit");

                    b.Property<string>("Transporteur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDeCamionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeDechetId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcId");

                    b.HasIndex("TypeDeCamionId");

                    b.HasIndex("TypeDeDechetId");

                    b.HasIndex("TypeDeTransportId");

                    b.ToTable("ReceptionTransfertDechets");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.ReceptionTransfertRondBeton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Diametre")
                        .HasColumnType("int");

                    b.Property<string>("Mat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCC")
                        .HasColumnType("int");

                    b.Property<int>("PCV")
                        .HasColumnType("int");

                    b.Property<int>("PQS")
                        .HasColumnType("int");

                    b.Property<int>("ParcId")
                        .HasColumnType("int");

                    b.Property<string>("Provenance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Termine")
                        .HasColumnType("bit");

                    b.Property<string>("Transporteur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDeCamionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcId");

                    b.HasIndex("TypeDeCamionId");

                    b.HasIndex("TypeDeTransportId");

                    b.ToTable("ReceptionTransfertRondBetons");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.SortieRondBeton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Diametre")
                        .HasColumnType("int");

                    b.Property<string>("Mat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBonA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTicket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PB")
                        .HasColumnType("int");

                    b.Property<int>("PCC")
                        .HasColumnType("int");

                    b.Property<int>("PCV")
                        .HasColumnType("int");

                    b.Property<int>("PQRa")
                        .HasColumnType("int");

                    b.Property<int>("PQS")
                        .HasColumnType("int");

                    b.Property<int>("ParcId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Termine")
                        .HasColumnType("bit");

                    b.Property<string>("Transporteur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDeCamionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcId");

                    b.HasIndex("TypeDeCamionId");

                    b.HasIndex("TypeDeTransportId");

                    b.ToTable("SortieRondBetons");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.SortieTransfertDechet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCC")
                        .HasColumnType("int");

                    b.Property<int>("PCV")
                        .HasColumnType("int");

                    b.Property<int>("PQS")
                        .HasColumnType("int");

                    b.Property<int>("ParcId")
                        .HasColumnType("int");

                    b.Property<bool>("Termine")
                        .HasColumnType("bit");

                    b.Property<string>("Transporteur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDeCamionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeDechetId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcId");

                    b.HasIndex("TypeDeCamionId");

                    b.HasIndex("TypeDeDechetId");

                    b.HasIndex("TypeDeTransportId");

                    b.ToTable("SortieTransfertDechets");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.SortieTransfertRondBeton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Diametre")
                        .HasColumnType("int");

                    b.Property<string>("Mat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumBL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCC")
                        .HasColumnType("int");

                    b.Property<int>("PCV")
                        .HasColumnType("int");

                    b.Property<int>("PQS")
                        .HasColumnType("int");

                    b.Property<int>("ParcId")
                        .HasColumnType("int");

                    b.Property<bool>("Termine")
                        .HasColumnType("bit");

                    b.Property<string>("Transporteur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDeCamionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcId");

                    b.HasIndex("TypeDeCamionId");

                    b.HasIndex("TypeDeTransportId");

                    b.ToTable("SortieTransfertRondBetons");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.StockRb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Qte")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StockRb");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.TypeDeCamion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeCamion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeDeCamions");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.TypeDeDechet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeDechet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeDeDechets");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.TypeDeTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeTransport")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeDeTransports");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.TypeProduit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeDeProduit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeProduits");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InterfacePontBascule.Models.Achat", b =>
                {
                    b.HasOne("InterfacePontBascule.Models.Parc", "Parc")
                        .WithMany()
                        .HasForeignKey("ParcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeCamion", "TypeDeCamion")
                        .WithMany()
                        .HasForeignKey("TypeDeCamionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeDechet", "TypeDeDechet")
                        .WithMany()
                        .HasForeignKey("TypeDeDechetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeTransport", "TypeDeTransport")
                        .WithMany()
                        .HasForeignKey("TypeDeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parc");

                    b.Navigation("TypeDeCamion");

                    b.Navigation("TypeDeDechet");

                    b.Navigation("TypeDeTransport");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.Pesage", b =>
                {
                    b.HasOne("InterfacePontBascule.Models.Parc", "Parc")
                        .WithMany()
                        .HasForeignKey("ParcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeCamion", "TypeDeCamion")
                        .WithMany()
                        .HasForeignKey("TypeDeCamionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeTransport", "TypeDeTransport")
                        .WithMany()
                        .HasForeignKey("TypeDeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parc");

                    b.Navigation("TypeDeCamion");

                    b.Navigation("TypeDeTransport");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.ReceptionRondBeton", b =>
                {
                    b.HasOne("InterfacePontBascule.Models.Parc", "Parc")
                        .WithMany()
                        .HasForeignKey("ParcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeCamion", "TypeDeCamion")
                        .WithMany()
                        .HasForeignKey("TypeDeCamionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeTransport", "TypeDeTransport")
                        .WithMany()
                        .HasForeignKey("TypeDeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parc");

                    b.Navigation("TypeDeCamion");

                    b.Navigation("TypeDeTransport");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.ReceptionTransfertDechet", b =>
                {
                    b.HasOne("InterfacePontBascule.Models.Parc", "Parc")
                        .WithMany()
                        .HasForeignKey("ParcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeCamion", "TypeDeCamion")
                        .WithMany()
                        .HasForeignKey("TypeDeCamionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeDechet", "TypeDeDechet")
                        .WithMany()
                        .HasForeignKey("TypeDeDechetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeTransport", "TypeDeTransport")
                        .WithMany()
                        .HasForeignKey("TypeDeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parc");

                    b.Navigation("TypeDeCamion");

                    b.Navigation("TypeDeDechet");

                    b.Navigation("TypeDeTransport");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.ReceptionTransfertRondBeton", b =>
                {
                    b.HasOne("InterfacePontBascule.Models.Parc", "Parc")
                        .WithMany()
                        .HasForeignKey("ParcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeCamion", "TypeDeCamion")
                        .WithMany()
                        .HasForeignKey("TypeDeCamionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeTransport", "TypeDeTransport")
                        .WithMany()
                        .HasForeignKey("TypeDeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parc");

                    b.Navigation("TypeDeCamion");

                    b.Navigation("TypeDeTransport");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.SortieRondBeton", b =>
                {
                    b.HasOne("InterfacePontBascule.Models.Parc", "Parc")
                        .WithMany()
                        .HasForeignKey("ParcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeCamion", "TypeDeCamion")
                        .WithMany()
                        .HasForeignKey("TypeDeCamionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeTransport", "TypeDeTransport")
                        .WithMany()
                        .HasForeignKey("TypeDeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parc");

                    b.Navigation("TypeDeCamion");

                    b.Navigation("TypeDeTransport");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.SortieTransfertDechet", b =>
                {
                    b.HasOne("InterfacePontBascule.Models.Parc", "Parc")
                        .WithMany()
                        .HasForeignKey("ParcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeCamion", "TypeDeCamion")
                        .WithMany()
                        .HasForeignKey("TypeDeCamionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeDechet", "TypeDeDechet")
                        .WithMany()
                        .HasForeignKey("TypeDeDechetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeTransport", "TypeDeTransport")
                        .WithMany()
                        .HasForeignKey("TypeDeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parc");

                    b.Navigation("TypeDeCamion");

                    b.Navigation("TypeDeDechet");

                    b.Navigation("TypeDeTransport");
                });

            modelBuilder.Entity("InterfacePontBascule.Models.SortieTransfertRondBeton", b =>
                {
                    b.HasOne("InterfacePontBascule.Models.Parc", "Parc")
                        .WithMany()
                        .HasForeignKey("ParcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeCamion", "TypeDeCamion")
                        .WithMany()
                        .HasForeignKey("TypeDeCamionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterfacePontBascule.Models.TypeDeTransport", "TypeDeTransport")
                        .WithMany()
                        .HasForeignKey("TypeDeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parc");

                    b.Navigation("TypeDeCamion");

                    b.Navigation("TypeDeTransport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
